{
	// Context
	"Nakama User ID from Context" : { 
	"prefix": "userid", 
	"body": [  
		"${1:userId}, ${2:ok} := ${3:ctx}.Value(runtime.RUNTIME_CTX_USER_ID).(string)",
		"if !${2:ok} {",
		"	$0",
		"}",
	],      
	"description": "The user ID associated with the execution context."
   },

   "Nakama User Username from Context" : { 
	"prefix": "username", 
	"body": [  
		"${1:username}, ${2:ok} := ${3:ctx}.Value(runtime.RUNTIME_CTX_USERNAME).(string)",
		"if !${2:ok} {",
		"	$0",
		"}",
	],      
	"description": "The username associated with the execution context."
   },

   "Nakama get value form Context" : { 
	"prefix": ["ctxvalue", "cvalue"], 
	"body": [  
		"${1:yourValue}, ${2:ok} := ${3:ctx}.Value(runtime.RUNTIME_CTX_$4).(${5|string,int64,map[string]string,int|})",
		"if !${2:ok} {",
		"	$0",
		"}",
	],      
	"description": "All registered functions across all runtimes receive a context as the first argument. This contains fields which depend on when and how the code is executed. You can extract information about the request or the user making it from the context"
   },

	// RPC
	"Nakama Remote Procedure Call" : { 
	"prefix": "rpc", 
	"body": [  
	  "func Rpc${1:Function}(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, payload string) (string, error) {",
	  "	$0",      
	  "}"
	],      
	"description": "Remote Procedure Calls (RPCs) let you call functions registered in your runtime code to operate on messages received from clients or execute custom logic on demand, for example a profanity filter for chat messages."
   },
   // Match Handler
   "Nakama Match Init" : { 
   "prefix": ["matchinit","minit"], 
   "body": [  
	 "func (${1:m} *${2:MatchHandler}) MatchInit(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, params map[string]interface{}) (interface{}, int, string) {",
	 "	state := &${3:MatchState}{}"
	 "	tickRate := ${4:1}"
	 "	label := \"$5\""
	 "	$0"
	 "	return state, tickRate, label"
	 "}"
   ],      
   "description": "Invoked when a match is created as a result of the match create function and sets up the initial state of a match. This will be called once at match start."
  },

  "Nakama Match Join" : { 
  "prefix": ["matchjoin","mjoin"], 
  "body": [  
	"func (${1:m} *${2:MatchHandler}) MatchJoin(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presences []runtime.Presence) interface{} {",
	"	$0"
	"	return state"
	"}"
  ],      
  "description": "Executed when one or more users have successfully completed the match join process after their MatchJoinAttempt() returns true. When their presences are sent to this function the users are ready to receive match data messages and can be targets for the dispatcher's BroadcastMessage() function."
 },

 "Nakama Match Join Attempt" : { 
	"prefix": ["matchjoinattempt","mjoinattempt"], 
	"body": [  
	  "func (${1:m} *${2:MatchHandler}) MatchJoinAttempt(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presence runtime.Presence, metadata map[string]string) (interface{}, bool, string) {",
	  "	$0"
	  "	return state, result, \"\""
	  "}"
	],      
	"description": "Executed when a user attempts to join the match using the client's match join operation. This includes any re-join request from a client after a lost connection is resumed, where client will need to explicitly re-join upon reconnection. Match join attempt can be used to prevent more players from joining after a match has started or disallow the user for any other game specific reason."
   },

   "Nakama Match Leave" : { 
	"prefix": ["matchleave","mleave"], 
	"body": [  
	  "func (${1:m} *${2:MatchHandler}) MatchLeave(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presences []runtime.Presence) interface{} {",
	  "	$0"
	  "	return state"
	  "}"
	],      
	"description": "Executed when one or more users have left the match for any reason including connection loss."
   },

   "Nakama Match Loop" : { 
	"prefix": ["matchloop","mloop"], 
	"body": [  
	  "func (${1:m} *${2:MatchHandler}) MatchLoop(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, messages []runtime.MatchData) interface{} {",
	  "	$0"
	  "	return state"
	  "}"
	],      
	"description": "Called when the match handler receives a runtime signal. Match signals allow the match handler to be sent a reservation signal to mark a user ID or session ID into the match state ahead of their join attempt and eventual join flow. This is useful to apply reservations to a matchmaking system with Nakama's matchmaker or match listings APIs."
   },

   "Nakama Match Signal" : { 
	"prefix": ["matchsignal","msignal"], 
	"body": [  
	  "func (${1:m} *${2:MatchHandler}) MatchSignal(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, data string) (interface{}, string) {",
	  "	$0"
	  "	return state, \"\""
	  "}"
	],      
	"description": "Executed on an interval based on the tick rate returned by MatchInit(). Each tick the match loop is run which can process messages received from clients and apply changes to the match state before the next tick. It can also dispatch messages to one or more connected match participants. To send messages back to the participants in the match you can keep track of them in the game state and use the dispatcher object to send messages to subsets of the users or all of them."
   },

   "Nakama Match Terminate" : { 
	"prefix": ["matchterminate","mterminate"], 
	"body": [  
	  "func (${1:m} *${2:MatchHandler}) MatchTerminate(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, graceSeconds int) interface{} {",
	  "	$0"
	  "	return state"
	  "}"
	],      
	"description": "Called when the server begins a graceful shutdown process. Will not be called if graceful shutdown is disabled. The match should attempt to complete any processing before the given number of seconds elapses, and optionally send a message to clients to inform them the server is shutting down. When the grace period expires the match will be forcefully closed if it is still running, clients will be disconnected, and the server will shut down."
   },


   // Match runtime
   "Nakama Match Broadcast Message" : { 
	"prefix": ["matchbroadcast","mbroadcast"], 
	"body": [  
		"${1:dispatcher}.BroadcastMessage(${2:opCode}, ${3:data}, ${4:presences}, ${5:sender})"
	],      
	"description": "Send a message to one or more presences. This may be called at any point in the match loop to give match participants information about match state changes. May also be useful inside the match join callback to send initial state to the user on successful join. Note that when broadcasting to multiple presences, if any presence is invalid then the broadcast will not occur."
   },
   "Nakama Match Kick" : { 
	"prefix": ["matchkick","mkick"], 
	"body": [  
		"${1:dispatcher}.Kick(${2:presences})"
	],      
	"description": "Removes participants from the match. Call at any point during the match loop to remove participants based on misbehavior or other game-specific rules."
   },
   "Nakama Match Label Update" : { 
	"prefix": ["matchlabelupdate","mlabelupdate"], 
	"body": [  
		"${1:dispatcher}.MatchLabelUpdate(${2:label})"
	],      
	"description": "Sets a new label for the match."
   },

   // Register messy thing
   "Nakama Before Hook" : { 
	"prefix": ["beforehook","bhook"], 
	"body": [
		"${1|func BeforeRt(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, envelope *rtapi.Envelope) (*rtapi.Envelope\, error){,func BeforeGetAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule) error{,func BeforeUpdateAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.UpdateAccountRequest) (*api.UpdateAccountRequest\, error){,func BeforeDeleteAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule) error{,func BeforeSessionRefresh(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.SessionRefreshRequest) (*api.SessionRefreshRequest\, error){,func BeforeSessionLogout(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.SessionLogoutRequest) (*api.SessionLogoutRequest\, error){,func BeforeAuthenticateApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest\, error){,func BeforeAuthenticateCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest\, error){,func BeforeAuthenticateDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest\, error){,func BeforeAuthenticateEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest\, error){,func BeforeAuthenticateFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest\, error){,func BeforeAuthenticateFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest\, error){,func BeforeAuthenticateGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest\, error){,func BeforeAuthenticateGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest\, error){,func BeforeAuthenticateSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest\, error){,func BeforeListChannelMessages(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest\, error){,func BeforeListFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListFriendsRequest) (*api.ListFriendsRequest\, error){,func BeforeAddFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AddFriendsRequest) (*api.AddFriendsRequest\, error){,func BeforeDeleteFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest\, error){,func BeforeBlockFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.BlockFriendsRequest) (*api.BlockFriendsRequest\, error){,func BeforeImportFacebookFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest\, error){,func BeforeImportSteamFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest\, error){,func BeforeCreateGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.CreateGroupRequest) (*api.CreateGroupRequest\, error){,func BeforeUpdateGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.UpdateGroupRequest) (*api.UpdateGroupRequest\, error){,func BeforeDeleteGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteGroupRequest) (*api.DeleteGroupRequest\, error){,func BeforeJoinGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.JoinGroupRequest) (*api.JoinGroupRequest\, error){,func BeforeLeaveGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LeaveGroupRequest) (*api.LeaveGroupRequest\, error){,func BeforeAddGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest\, error){,func BeforeBanGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest\, error){,func BeforeKickGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest\, error){,func BeforePromoteGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest\, error){,func BeforeDemoteGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest\, error){,func BeforeListGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest\, error){,func BeforeListUserGroups(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest\, error){,func BeforeListGroups(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListGroupsRequest) (*api.ListGroupsRequest\, error){,func BeforeDeleteLeaderboardRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest\, error){,func BeforeDeleteTournamentRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest\, error){,func BeforeListLeaderboardRecords(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest\, error){,func BeforeWriteLeaderboardRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest\, error){,func BeforeListLeaderboardRecordsAroundOwner(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest\, error){,func BeforeLinkApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountApple) (*api.AccountApple\, error){,func BeforeLinkCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountCustom) (*api.AccountCustom\, error){,func BeforeLinkDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountDevice) (*api.AccountDevice\, error){,func BeforeLinkEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountEmail) (*api.AccountEmail\, error){,func BeforeLinkFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LinkFacebookRequest) (*api.LinkFacebookRequest\, error){,func BeforeLinkFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame\, error){,func BeforeLinkGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGameCenter) (*api.AccountGameCenter\, error){,func BeforeLinkGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGoogle) (*api.AccountGoogle\, error){,func BeforeLinkSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LinkSteamRequest) (*api.LinkSteamRequest\, error){,func BeforeListMatches(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListMatchesRequest) (*api.ListMatchesRequest\, error){,func BeforeListNotifications(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListNotificationsRequest) (*api.ListNotificationsRequest\, error){,func BeforeDeleteNotifications(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest\, error){,func BeforeListStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest\, error){,func BeforeReadStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest\, error){,func BeforeWriteStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest\, error){,func BeforeDeleteStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest\, error){,func BeforeJoinTournament(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.JoinTournamentRequest) (*api.JoinTournamentRequest\, error){,func BeforeListTournamentRecords(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest\, error){,func BeforeListTournaments(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListTournamentsRequest) (*api.ListTournamentsRequest\, error){,func BeforeWriteTournamentRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest\, error){,func BeforeListTournamentRecordsAroundOwner(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest\, error){,func BeforeUnlinkApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountApple) (*api.AccountApple\, error){,func BeforeUnlinkCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountCustom) (*api.AccountCustom\, error){,func BeforeUnlinkDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountDevice) (*api.AccountDevice\, error){,func BeforeUnlinkEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountEmail) (*api.AccountEmail\, error){,func BeforeUnlinkFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebook) (*api.AccountFacebook\, error){,func BeforeUnlinkFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame\, error){,func BeforeUnlinkGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGameCenter) (*api.AccountGameCenter\, error){,func BeforeUnlinkGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGoogle) (*api.AccountGoogle\, error){,func BeforeUnlinkSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountSteam) (*api.AccountSteam\, error){,func BeforeGetUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.GetUsersRequest) (*api.GetUsersRequest\, error){,func BeforeValidatePurchaseApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest\, error){,func BeforeValidateSubscriptionApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest\, error){,func BeforeValidateSubscriptionGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest\, error){,func BeforeListSubscriptions(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest\, error){,func BeforeGetSubscription(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest\, error){,func BeforeValidatePurchaseGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest\, error){,func BeforeValidatePurchaseHuawei(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest\, error){,func BeforeEvent(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.Event) (*api.Event\, error){|}",
		"	$0",
		"}"
	],      
	"description": "These hooks run before a particular server runtime event occurs. This can be used to modify the input to a particular function or take additional actions before it occurs."
   },
   "Nakama After Hook" : { 
	"prefix": ["afterhook","ahook"], 
	"body": [
		"${1|func AfterRt(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out\, in *rtapi.Envelope) error{,func AfterGetAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Account) error{,func AfterUpdateAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.UpdateAccountRequest) error{,func AfterDeleteAccount(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule) error{,func AfterSessionRefresh(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.SessionRefreshRequest) error{,func AfterSessionLogout(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.SessionLogoutRequest) error{,func AfterAuthenticateApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateAppleRequest) error{,func AfterAuthenticateCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateCustomRequest) error{,func AfterAuthenticateDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateDeviceRequest) error{,func AfterAuthenticateEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateEmailRequest) error{,func AfterAuthenticateFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateFacebookRequest) error{,func AfterAuthenticateFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateFacebookInstantGameRequest) error{,func AfterAuthenticateGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateGameCenterRequest) error{,func AfterAuthenticateGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateGoogleRequest) error{,func AfterAuthenticateSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Session\, in *api.AuthenticateSteamRequest) error{,func AfterListChannelMessages(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ChannelMessageList\, in *api.ListChannelMessagesRequest) error{,func AfterListFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.FriendList) error{,func AfterAddFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AddFriendsRequest) error{,func AfterDeleteFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteFriendsRequest) error{,func AfterBlockFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.BlockFriendsRequest) error{,func AfterImportFacebookFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ImportFacebookFriendsRequest) error{,func AfterImportSteamFriends(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.ImportSteamFriendsRequest) error{,func AfterCreateGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Group\, in *api.CreateGroupRequest) error{,func AfterUpdateGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.UpdateGroupRequest) error{,func AfterDeleteGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteGroupRequest) error{,func AfterJoinGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.JoinGroupRequest) error{,func AfterLeaveGroup(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LeaveGroupRequest) error{,func AfterAddGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AddGroupUsersRequest) error{,func AfterBanGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.BanGroupUsersRequest) error{,func AfterKickGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.KickGroupUsersRequest) error{,func AfterPromoteGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.PromoteGroupUsersRequest) error{,func AfterDemoteGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DemoteGroupUsersRequest) error{,func AfterListGroupUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.GroupUserList\, in *api.ListGroupUsersRequest) error{,func AfterListUserGroups(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.UserGroupList\, in *api.ListUserGroupsRequest) error{,func AfterListGroups(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.GroupList\, in *api.ListGroupsRequest) error{,func AfterDeleteLeaderboardRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteLeaderboardRecordRequest) error{,func AfterDeleteTournamentRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteTournamentRecordRequest) error{,func AfterListLeaderboardRecords(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.LeaderboardRecordList\, in *api.ListLeaderboardRecordsRequest) error{,func AfterWriteLeaderboardRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.LeaderboardRecord\, in *api.WriteLeaderboardRecordRequest) error{,func AfterListLeaderboardRecordsAroundOwner(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.LeaderboardRecordList\, in *api.ListLeaderboardRecordsAroundOwnerRequest) error{,func AfterLinkApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountApple) error{,func AfterLinkCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountCustom) error{,func AfterLinkDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountDevice) error{,func AfterLinkEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountEmail) error{,func AfterLinkFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LinkFacebookRequest) error{,func AfterLinkFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebookInstantGame) error{,func AfterLinkGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGameCenter) error{,func AfterLinkGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGoogle) error{,func AfterLinkSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.LinkSteamRequest) error{,func AfterListMatches(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.MatchList\, in *api.ListMatchesRequest) error{,func AfterListNotifications(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.NotificationList\, in *api.ListNotificationsRequest) error{,func AfterDeleteNotifications(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteNotificationsRequest) error{,func AfterListStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.StorageObjectList\, in *api.ListStorageObjectsRequest) error{,func AfterReadStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.StorageObjects\, in *api.ReadStorageObjectsRequest) error{,func AfterWriteStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.StorageObjectAcks\, in *api.WriteStorageObjectsRequest) error{,func AfterDeleteStorageObjects(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.DeleteStorageObjectsRequest) error{,func AfterJoinTournament(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.JoinTournamentRequest) error{,func AfterListTournamentRecords(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.TournamentRecordList\, in *api.ListTournamentRecordsRequest) error{,func AfterListTournaments(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.TournamentList\, in *api.ListTournamentsRequest) error{,func AfterWriteTournamentRecord(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.LeaderboardRecord\, in *api.WriteTournamentRecordRequest) error{,func AfterListTournamentRecordsAroundOwner(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.TournamentRecordList\, in *api.ListTournamentRecordsAroundOwnerRequest) error{,func AfterUnlinkApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountApple) error{,func AfterUnlinkCustom(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountCustom) error{,func AfterUnlinkDevice(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountDevice) error{,func AfterUnlinkEmail(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountEmail) error{,func AfterUnlinkFacebook(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebook) error{,func AfterUnlinkFacebookInstantGame(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountFacebookInstantGame) error{,func AfterUnlinkGameCenter(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGameCenter) error{,func AfterUnlinkGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountGoogle) error{,func AfterUnlinkSteam(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.AccountSteam) error{,func AfterGetUsers(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.Users\, in *api.GetUsersRequest) error{,func AfterValidatePurchaseApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidatePurchaseResponse\, in *api.ValidatePurchaseAppleRequest) error{,func AfterValidateSubscriptionApple(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidateSubscriptionResponse\, in *api.ValidateSubscriptionAppleRequest) error{,func AfterValidateSubscriptionGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidateSubscriptionResponse\, in *api.ValidateSubscriptionGoogleRequest) error{,func AfterListSubscriptions(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.SubscriptionList\, in *api.ListSubscriptionsRequest) error{,func AfterGetSubscription(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidatedSubscription\, in *api.GetSubscriptionRequest) error{,func AfterValidatePurchaseGoogle(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidatePurchaseResponse\, in *api.ValidatePurchaseGoogleRequest) error{,func AfterValidatePurchaseHuawei(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, out *api.ValidatePurchaseResponse\, in *api.ValidatePurchaseHuaweiRequest) error{,func AfterEvent(ctx context.Context\, logger runtime.Logger\, db *sql.DB\, nk runtime.NakamaModule\, in *api.Event) error{|}",
		"	$0",
		"}"
	],      
	"description": "These hooks run before a particular server runtime event occurs. This can be used to modify the input to a particular function or take additional actions before it occurs."
   },
}